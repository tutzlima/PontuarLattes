tab <- rbind(tab, ftab)
}
if (ncol(tab) > 1)
tab <- cbind(tab, "Total" = apply(tab, 1, sum, na.rm = TRUE))
tab[is.na(tab)] <- 0
cn <- colnames(tab)
tab <- tab[order(tab[, ncol(tab)], decreasing = TRUE), ]
# Matrix com uma coluna se transforma em vetor
if (is.null(dim(tab)[1])) {
rn <- names(tab)
tab <- matrix(tab, nrow = length(tab), ncol = 1)
rownames(tab) <- rn
colnames(tab) <- cn
}
tab <- cbind("Professor" = rownames(tab), as.data.frame(tab))
# Eliminar professores não credenciados em anos específicos
if (exists("PeriodoProf")) {
for (i in seq_len(nrow(PeriodoProf)))
for (a in Inicio:Fim)
if (!(a %in% PeriodoProf$ini[i]:PeriodoProf$fim[i]))
tab[tab$Professor == PeriodoProf$prof[i], as.character(a)] <- NaN
}
tab
}
pontuacaoLvr  <- TabProd(p[p$tipo %in% c("Lvr", "Cap", "Org"), ], "pontos")
pontuacaoArt  <- TabProd(p[p$tipo == "Artigo", ], "pontos")
pontuacaoSNIP <- TabProd(p[p$tipo == "Artigo", ], "SNIP")
pontuacaoSJR  <- TabProd(p[p$tipo == "Artigo", ], "SJR")
nSJR <- cbind("Não" = tapply(p$SJR[p$tipo == "Artigo"], p$prof[p$tipo == "Artigo"],
function(x) sum(is.na(x))),
"Sim" = tapply(p$SJR[p$tipo == "Artigo"], p$prof[p$tipo == "Artigo"],
function(x) sum(!is.na(x))))
nSJR <- as.data.frame(nSJR)
nSJR <- cbind("Professor" = rownames(nSJR), nSJR, stringsAsFactors = FALSE)
nSJR$Não[is.na(nSJR$Não)] <- 0
nSJR$Sim[is.na(nSJR$Sim)] <- 0
nSnip <- cbind("Não" = tapply(p$SNIP[p$tipo == "Artigo"], p$prof[p$tipo == "Artigo"],
function(x) sum(is.na(x), na.rm = TRUE)),
"Sim" = tapply(p$SNIP[p$tipo == "Artigo"], p$prof[p$tipo == "Artigo"],
function(x) sum(!is.na(x), na.rm = TRUE)))
nSnip <- as.data.frame(nSnip)
nSnip <- cbind("Professor" = rownames(nSnip), nSnip, stringsAsFactors = FALSE)
nSnip$Não[is.na(nSnip$Não)] <- 0
nSnip$Sim[is.na(nSnip$Sim)] <- 0
p4 <- p[p$tipo == "Artigo", c("prof", "ano", "pontos")]
p4s <- split(p4, p4$prof)
QuatroMaiores <- function(x) {
x <- x[order(x$pontos, decreasing = TRUE), ]
if (nrow(x) > 4)
x <- x[1:4, ]
x
}
p4s <- lapply(p4s, QuatroMaiores)
p4 <- do.call("rbind", p4s)
tab <- tapply(p4$pontos, p4$prof, sum)
falta <- !(quando[, "Professor"] %in% names(tab))
if (sum(falta) > 0) {
zf <- rep(0, sum(falta))
names(zf) <- quando[falta, "Professor"]
tab <- c(tab, zf)
}
tab <- sort(tab, decreasing = TRUE)
pontuacaoArt4 <- data.frame(Professor = names(tab), Pontos = unname(tab))
posdoc <- do.call("rbind", posdoc)
if (is.null(posdoc)) {
posdoc <- matrix(NA, ncol = 4)
} else {
posdoc[, 2] <- NomeSigla(sapply(posdoc[, 2], html2tex))
if (nrow(posdoc) > 1)
posdoc <- posdoc[order(posdoc[, 4]), ]
}
colnames(posdoc) <- c("Professor", "Instituição", "Início", "Fim")
posdoc <- as.data.frame(posdoc, stringsAsFactors = FALSE)
posdoc$Início <- as.numeric(posdoc$Início)
posdoc$Fim <- as.numeric(posdoc$Fim)
if (length(oriconc)) {
oc <- do.call("rbind", oriconc)
colnames(oc) <- c("Professor", "Natureza", "Ano", "Instituição", "Curso", "Orientado")
oc[, 4] <- NomeSigla(sapply(oc[, 4], html2tex))
oc <- as.data.frame(oc, stringsAsFactors = FALSE)
oc$Instituição <- sapply(oc$Instituição, html2tex)
oc$Curso <- sapply(oc$Curso, html2tex)
oc$Orientado <- sapply(oc$Orientado, html2tex)
oc$Ano <- as.numeric(as.character(oc$Ano))
oc <- oc[oc$Ano >= Inicio & oc$Ano <= Fim, ]
# Eliminar professores não credenciados em anos específicos
if (exists("PeriodoProf")) {
idx <- rep(TRUE, nrow(oc))
for (i in seq_len(nrow(PeriodoProf))) {
idx[oc$Professor == PeriodoProf$prof[i] &
!(oc$Ano %in% PeriodoProf$ini[i]:PeriodoProf$fim[i])] <- FALSE
}
oc <- oc[idx, ]
}
oc$Natureza <- sapply(oc$Natureza, html2tex)
oc$Natureza <- gsub("\\\\_",  "_", oc$Natureza)
oc$Natureza <- sub("Dissertação de mestrado", "M", oc$Natureza)
oc$Natureza <- sub("INICIACAO_CIENTIFICA", "IC", oc$Natureza)
oc$Natureza <- sub("MONOGRAFIA_DE_CONCLUSAO_DE_CURSO_APERFEICOAMENTO_E_ESPECIALIZACAO",
"E", oc$Natureza)
oc$Natureza <- sub("ORIENTACAO-DE-OUTRA-NATUREZA", "O", oc$Natureza)
oc$Natureza <- sub("Supervisão de pós-doutorado", "PD", oc$Natureza)
oc$Natureza <- sub("Tese de doutorado", "D", oc$Natureza)
oc$Natureza <- sub("TRABALHO_DE_CONCLUSAO_DE_CURSO_GRADUACAO", "G",
oc$Natureza)
oc$Natureza <- factor(oc$Natureza)
oc$um <- 1
oriconcTab <- tapply(oc$um, list(oc$Professor, oc$Natureza), sum, na.rm = TRUE)
oriconcTab[is.na(oriconcTab)] <- 0
# Ordenar colunas (nem todos os programas têm todos os tipos de orientações)
ordem <- c("O", "IC", "G", "E", "M", "D", "PD")
faltaCol <- !(levels(oc$Natureza) %in% ordem)
if (sum(faltaCol)) {
print(levels(oc$Natureza))
cat(paste0("Tipo de orientação não reconhecida: ",
levels(oc$Natureza)[faltaCol]), file = stderr())
if (!interactive())
quit(save = "no", status = 1)
}
ordem <- ordem[ordem %in% levels(oc$Natureza)]
if (OrdenarOrientacaoPorNome) {
ro <- order(rownames(oriconcTab))
} else {
ro <- seq_len(nrow(oriconcTab))
if ("PD" %in% ordem && "D" %in% ordem && "M" %in% ordem) {
ro <- order(oriconcTab[, "PD"], oriconcTab[, "D"], oriconcTab[, "M"],
decreasing = TRUE)
} else {
if ("D" %in% ordem && "M" %in% ordem) {
ro <- order(oriconcTab[, "D"], oriconcTab[, "M"], decreasing = TRUE)
} else {
if ("M" %in% ordem)
ro <- order(oriconcTab[, "M"], decreasing = TRUE)
}
}
}
if (nrow(oriconcTab) > 2) {
oriconcTab <- oriconcTab[ro, ordem]
}
oriconcTab <- as.data.frame(oriconcTab, stringsAsFactors = FALSE)
oriconcTab <- cbind("Orientador" = rownames(oriconcTab), oriconcTab)
# Detalhamento das orientações concluídas
oc$Professor <- sub(" .* ", " ", oc$Professor)
oc$Orientado <- sub(" .* ", " ", oc$Orientado)
oc$Instituição <- AbreviarInstituicao(oc$Instituição)
oc$Curso <- AbreviarInstituicao(oc$Curso)
oc$Professor <- sub(" .* ", " ", oc$Professor)
oc$Orientado <- sub(" .* ", " ", oc$Orientado)
oc$Instituição <- sub("Universidade", "U.", oc$Instituição)
oc$Instituição <- sub("Federal", "F.", oc$Instituição)
oc$Instituição <- sub("Estadual", "E.", oc$Instituição)
oc$Curso <- sub("Programa de Pós-Graduação", "PPG", oc$Curso)
oc <- oc[order(paste(oc$Professor, oc$Ano, oc$Natureza, oc$Instituição)),
c("Professor", "Ano", "Natureza", "Instituição", "Curso", "Orientado")]
} else {
oriconcTab <- data.frame(Natureza = "", Instituição = "", Curso = "", Professor = "", Orientado = "", Ano = "")
oc <- data.frame(Natureza = "", Instituição = "", Curso = "", Professor = "", Orientado = "", Ano = "")
}
# Prêmios
if (length(premios)) {
if (length(premios) > 1)
premios <- do.call("rbind", premios)
else
premios <- matrix(premios[[1]], nrow = 1)
colnames(premios) <- c("Professor", "Prêmio", "Entidade promotora", "Ano", "En")
if (nrow(premios) > 1)
premios <- premios[order(premios[, "Ano"]), 1:4]
premios <- as.data.frame(premios, stringsAsFactors = FALSE)
premios <- premios[premios[, "Ano"] >= Inicio & premios[, "Ano"] <= Fim, ]
premios$Prêmio <- sapply(premios$Prêmio, html2tex)
premios[[3]] <- sapply(premios[[3]], html2tex)
# Eliminar professores não credenciados em anos específicos
if (exists("PeriodoProf")) {
idx <- rep(TRUE, nrow(premios))
for (i in seq_len(nrow(PeriodoProf))) {
idx[premios$Professor == PeriodoProf$prof[i] &
!(premios$Ano %in% PeriodoProf$ini[i]:PeriodoProf$fim[i])] <- FALSE
}
premios <- premios[idx, ]
}
premios[, "Professor"] <- sub(" .* ", " ", premios[, "Professor"])
}
if (length(oriand)) {
oa <- do.call("rbind", oriand)
oa <- as.data.frame(oa, stringsAsFactors = FALSE)
colnames(oa) <- c("Professor", "Natureza", "Ano", "Orientando", "Instituição")
oa$Instituição <- sapply(oa$Instituição, html2tex)
oa$Instituição <- NomeSigla(sapply(oa$Instituição, html2tex))
oa$Instituição <- AbreviarInstituicao(oa$Instituição)
oa$Natureza <- sapply(oa$Natureza, html2tex)
oa$Orientando <- sapply(oa$Orientando, html2tex)
oa$Natureza <- factor(oa$Natureza)
levels(oa$Natureza) <- sub("Dissertação de mestrado", "M", levels(oa$Natureza))
levels(oa$Natureza) <- sub("Iniciação Científica", "IC", levels(oa$Natureza))
levels(oa$Natureza) <-
sub("Monografia de conclusão de curso de aperfeiçoamento/especialização", "E",
levels(oa$Natureza))
levels(oa$Natureza) <- sub("Orientação de outra natureza", "O", levels(oa$Natureza))
levels(oa$Natureza) <- sub("Supervisão de pós-doutorado", "PD", levels(oa$Natureza))
levels(oa$Natureza) <- sub("Tese de doutorado", "D", levels(oa$Natureza))
levels(oa$Natureza) <- sub("Trabalho de conclusão de curso de graduação", "G",
levels(oa$Natureza))
oa$um <- 1
oriandTab <- tapply(oa$um, list(oa$Professor, oa$Natureza), sum, na.rm = TRUE)
oriandTab[is.na(oriandTab)] <- 0
ordem <- c("O", "IC", "G", "E", "M", "D", "PD")
faltaCol <- !(levels(oa$Natureza) %in% ordem)
if (sum(faltaCol)) {
print(levels(oa$Natureza))
cat(paste0("Tipo de orientação desconhecida: ",
levels(oa$Natureza)[faltaCol]), file = stderr())
if (!interactive())
quit(save = "no", status = 1)
}
ordem <- ordem[ordem %in% levels(oa$Natureza)]
if (OrdenarOrientacaoPorNome) {
ro <- order(rownames(oriandTab))
} else {
ro <- seq_len(nrow(oriandTab))
if ("PD" %in% ordem && "D" %in% ordem && "M" %in% ordem) {
ro <- order(oriandTab[, "PD"], oriandTab[, "D"], oriandTab[, "M"],
decreasing = TRUE)
} else {
if ("D" %in% ordem && "M" %in% ordem) {
ro <- order(oriandTab[, "D"], oriandTab[, "M"], decreasing = TRUE)
} else {
if ("M" %in% ordem)
ro <- order(oriandTab[, "M"], decreasing = TRUE)
}
}
}
if (nrow(oriandTab) > 2) {
oriandTab <- oriandTab[ro, ordem]
}
oriandTab <- as.data.frame(oriandTab, stringsAsFactors = FALSE)
oriandTab <- cbind("Orientador" = rownames(oriandTab), oriandTab)
# Detalhamento das orientações em andamento
oa$Professor <- sub(" .* ", " ", oa$Professor)
oa$Ano <- as.numeric(as.character(oa$Ano))
oa <- oa[order(paste(oa$Professor, oa$Ano, oa$Natureza, oa$Instituição)),
c("Professor", "Ano", "Natureza", "Instituição", "Orientando")]
} else {
oriandTab <- data.frame(Orientador = "", O = "", IC = "", G = "", M = "",
D = "", PD = "", Total = "")
oa <- data.frame(Ano = "", Professor = "", Natureza = "", Instituição =
"", Orientando = "")
}
if (length(ensino)) {
ens <- do.call("rbind", ensino)
ens <- as.data.frame(ens, stringsAsFactors = FALSE)
names(ens) <- c("Professor", "Tipo", "MI", "AnoI", "MF", "AnoF")
ens <- ens[ens$AnoI >= as.character(Inicio) &
(ens$AnoF <= as.character(Fim) | ens$AnoF == ""), ]
if (nrow(ens)) {
ens$um <- 1
ensinoTab <- tapply(ens$um, list(ens$Professor, ens$Tipo), sum, na.rm = TRUE)
ensinoTab[is.na(ensinoTab)] <- 0
colnames(ensinoTab) <- sub("OUTRO", "Outro", colnames(ensinoTab))
colnames(ensinoTab) <- sub("ENSINO-MEDIO", "Ens. Médio", colnames(ensinoTab))
colnames(ensinoTab) <- sub("APERFEICOAMENTO", "Aperfeiçoamento", colnames(ensinoTab))
colnames(ensinoTab) <- sub("ESPECIALIZACAO", "Especialização", colnames(ensinoTab))
colnames(ensinoTab) <- sub("GRADUACAO", "Graduação", colnames(ensinoTab))
colnames(ensinoTab) <- sub("POS-", "Pós-", colnames(ensinoTab))
ensinoTab <- as.data.frame(cbind("Professor" = rownames(ensinoTab), ensinoTab))
}
}
if (!exists("ensinoTab"))
ensinoTab <- data.frame("Atividade de ensino" = "Nenhuma atividade de ensino registrada com início e fim no período")
if (length(extensao)) {
ext <- do.call("rbind", extensao)
ext <- as.data.frame(ext, stringsAsFactors = FALSE)
names(ext) <- c("Professor", "Atividade", "MI", "AnoI", "MF", "AnoF")
ext$Atividade <- sapply(ext$Atividade, html2tex)
ext$MI <- as.numeric(ext$MI)
ext$MF <- as.numeric(ext$MF)
ext$AnoI <- as.numeric(ext$AnoI)
ext$AnoF <- as.numeric(ext$AnoF)
ext <- ext[ext$AnoI <= Fim & (ext$AnoF >= Inicio | is.na(ext$AnoF)), ]
if (nrow(ext)) {
extensaoTab <- ext
} else {
extensaoTab <- data.frame("Atividade de extensao" = "Nenhuma atividade de extensao registrada com início e fim no período", check.names = FALSE)
}
} else {
extensaoTab <- data.frame("Atividade de extensao" = "Nenhuma atividade de extensao registrada com início e fim no período", check.names = FALSE)
}
if (length(projext)) {
ext <- do.call("rbind", projext)
ext <- as.data.frame(ext, stringsAsFactors = FALSE)
names(ext) <- c("Professor", "Projeto", "MI", "AnoI", "MF", "AnoF")
ext$Projeto <- sapply(ext$Projeto, html2tex)
ext$MI <- as.numeric(ext$MI)
ext$MF <- as.numeric(ext$MF)
ext$AnoI <- as.numeric(ext$AnoI)
ext$AnoF <- as.numeric(ext$AnoF)
ext <- ext[ext$AnoI <= Fim & (ext$AnoF >= Inicio | is.na(ext$AnoF)), ]
if (nrow(ext)) {
projextTab <- ext
} else {
projextTab <- data.frame("Projeto de extensao" = "Nenhum projeto de extensao registrado com início e fim no período", check.names = FALSE)
}
} else {
projextTab <- data.frame("Projeto de extensao" = "Nenhum projeto de extensao registrado com início e fim no período", check.names = FALSE)
}
pLvr <- pontuacaoLvr[, c(1, ncol(pontuacaoLvr))]
pArt <- pontuacaoArt[, c(1, ncol(pontuacaoArt))]
pLvr[, 2] <- pLvr[, 2] / max(pLvr[, 2])
pArt[, 2] <- pArt[, 2] / max(pArt[, 2])
colnames(pLvr) <- c("Professor", "Livros")
colnames(pArt) <- c("Professor", "Artigos")
pond <- merge(pLvr, pArt, all = TRUE, stringsAsFactors = FALSE)
pond$Média <- PesoArtigos * pond$Artigos + PesoLivros * pond$Livros
pond <- pond[order(pond$Média, decreasing = TRUE), ]
pm <- pcompleto[, c("tipo", "pontos", "ano")]
pm$pontos[pm$tipo == "Artigo"] <- PesoArtigos * pm$pontos[pm$tipo == "Artigo"]
pm$pontos[pm$tipo != "Artigo"] <- PesoLivros * pm$pontos[pm$tipo != "Artigo"]
media <- tapply(pm$pontos, pm$ano, function(x) sum(x) / nrow(quando))
mediamovel <- rep(0, max(as.numeric(names(media))) - min(as.numeric(names(media))) + 1)
names(mediamovel) <- as.character(as.numeric(min(names(media))):as.numeric(max(names(media))))
for (n in names(media))
mediamovel[[n]] <- media[[n]]
mmmsg <- character()
MediaMovel <- function(x) {
if (nrow(x) < 3) {
msg <- paste0(x$prof[1], ": não é possível calcular a média móvel porque ")
if (nrow(x) == 0)
msg <- paste0(msg, "não há nenhuma publicação registrada.")
else if (nrow(x) == 1)
msg <- paste0(msg, "apenas 1 publicação está registrada.\n\n")
else
msg <- paste0(msg, "apenas 2 publicações estão registradas.\n\n")
mmmsg <<- c(mmmsg, msg)
return(NA)
}
sa <- tapply(x$pontos[x$tipo == "Artigo"], x$ano[x$tipo == "Artigo"], sum, na.rm = TRUE) * PesoArtigos
sl <- tapply(x$pontos[x$tipo != "Artigo"], x$ano[x$tipo != "Artigo"], sum, na.rm = TRUE) * PesoLivros
anos <- c(names(sa), names(sl))
if (max(as.numeric(anos)) - min(as.numeric(anos)) < 3) {
mmmsg <- paste0(x$prof[1], ": não é possível calcular a média móvel porque a produção registrada não se estende por um mínimo de três anos.")
return(NA)
}
m <- numeric()
for (a in min(as.numeric(anos)):max(as.numeric(anos))) {
ano <- as.character(a)
m[ano] <- 0
if (length(grep(ano, names(sa))))
m[ano] <- m[ano] + PesoArtigos * sa[ano]
if (length(grep(ano, names(sl))))
m[ano] <- m[ano] + PesoLivros * sl[ano]
}
mm <- rep(0, max(as.numeric(names(m))) - min(as.numeric(names(m))) + 1)
names(mm) <- as.character(as.numeric(min(names(m))):as.numeric(max(names(m))))
for (n in names(m))
mm[[n]] <- m[[n]]
mml <- length(mm)
mm1 <- mm[3:mml]
mm2 <- mm[2:(mml - 1)]
mm3 <- mm[1:(mml - 2)]
mm <- (mm1 + mm2 + mm3) / 3
mm
}
pcl <- split(pcompleto, pcompleto$prof)
mm <- lapply(pcl, MediaMovel)
mm <- mm[!is.na(mm)]
p$um <- 1
producao <- tapply(p$um, list(p$prof, p$qualis), sum)
if (sum(grepl("Nada", colnames(producao)))) {
producao <- producao[, !grepl("Nada", colnames(producao))]
}
if ("A1" %in% colnames(producao)) {
if ("A2" %in% colnames(producao))
producao <- producao[order(producao[, "A1"], producao[, "A2"], decreasing = TRUE), ]
else
producao <- producao[order(producao[, "A1"], decreasing = TRUE), ]
}
p$producao <- sapply(p$producao, html2tex)
p$livro.ou.periodico <- sapply(p$livro.ou.periodico, html2tex)
coaut <- p[p$ncoaut.max > 1,
c("prof", "producao", "ano", "livro.ou.periodico", "isxn", "ncoaut.nm", "ncoaut.id", "ncoaut")]
coaut <- coaut[order(coaut$producao, coaut$prof), ]
coaut$livro.ou.periodico[is.na(coaut$livro.ou.periodico)] <- ""
b <- p[, c("prof", "producao", "ano", "qualis", "SJR", "SNIP", "livro.ou.periodico", "isxn", "ncoaut.max")]
b <- b[order(p$prof, p$ano, p$producao), ]
b$prof <- sub(" .* ", " ", b$prof)
b$prof <- sub("^(...................).*", "\\1", b$prof)
bp <- split(b, b$prof)
ObterCapDup <- function(x) {
isbnls <- x$isxn[x$qualis == "Lvr"]
x$capdup <- x$qualis == "Cap" & x$isxn %in% isbnls
x
}
bp <- lapply(bp, ObterCapDup)
b <- do.call("rbind", bp)
b$erro <- ""
if (sum(b$capdup) > 0) {
b$erro[b$capdup] <- "capdup"
}
b$capdup <- NULL
idx <- ((b$tipo == "Artigo" | b$qualis == "OD") & nchar(b$isxn) != 8) | ((b$tipo != "Artigo" & b$qualis != "OD") & nchar(b$isxn) != 13)
if (sum(idx) > 0) {
b$erro[idx] <- "ncarac"
}
idx <- b$ncoaut.max > 1
if (sum(idx) > 0) {
b$erro[idx] <- "coautr"
}
b$ncoaut.max <- NULL
checkISBN <- function(x) {
x <- strsplit(x, "")[[1]]
if (length(x) != 13)
return(FALSE) # Não é livro
x[x == "X"] <- 10
x <- as.numeric(x)
if (sum(is.na(x)) > 0)
return(TRUE)
correto <- 10 - (sum(x[1:12] * c(1, 3)) %% 10)
if (correto == 10)
correto <- 0
if (x[13] == correto) {
return(FALSE) # Nenhum problema
} else {
return(TRUE)  # Erro na soma
}
}
idx <- sapply(b$isxn, checkISBN)
if (sum(idx) > 0) {
b$erro[idx] <- "ninval"
}
b$producao <- sub("^(................................).*", "\\1", b$producao)
b$livro.ou.periodico <- sub("^(....................................).*", "\\1", b$livro.ou.periodico)
idx <- grep("[A-Z][A-Z][A-Z][A-Z][A-Z]", b$producao)
b$producao[idx] <- sub("^(...........................).*", "\\1", b$producao[idx])
idx <- grep("[A-Z][A-Z][A-Z][A-Z][A-Z]", b$livro.ou.periodico)
b$livro.ou.periodico[idx] <- sub("^(...........................).*", "\\1", b$livro.ou.periodico[idx])
dup <- b[, c("prof", "qualis", "producao")]
dup$producao <- tolower(dup$producao)
dup$producao <- gsub("[[:punct:]]", "", dup$producao)
dup$producao <- gsub("[[:space:]]", "", dup$producao)
dup$producao <- sub("^(........................).*", "\\1", dup$producao)
idx <- duplicated(dup)
if (sum(idx) > 0) {
b$erro[idx] <- "duplic"
}
rm(idx, dup, checkISBN)
levels(b$qualis) <- sub("Nada", " ", levels(b$qualis))
names(b) <- c("Professor", "Produção (títulos truncados)", "Ano", "Qualis", "SJR",
"SNIP", "Periódico ou Livro (títulos truncados)", "ISSN/ISBN", "erro")
proddet <- b
proddet$SNIP <- round(proddet$SNIP, 3)
rm(b)
ttldif <- p[p$tipo == "Artigo", ]
ttldif$titulo10 <- sapply(ttldif$titulo10, html2tex)
ttldif$titulo13 <- sapply(ttldif$titulo13, html2tex)
if (nrow(ttldif) > 0) {
ttldif$ano <- as.numeric(as.character(ttldif$ano))
ttldif$titulo <- ""
idx <- ttldif$ano >= QualQualis["Q10", "ini"] & ttldif$ano <= QualQualis["Q10", "fim"]
ttldif$titulo[idx] <- ttldif$titulo10[idx]
idx <- ttldif$ano >= QualQualis["Q13", "ini"] & ttldif$ano <= QualQualis["Q13", "fim"]
ttldif$titulo[idx] <- ttldif$titulo13[idx]
#idx <- ttldif$ano >= QualQualis["Q17", "ini"] & ttldif$ano <= QualQualis["Q17", "fim"]
ttldif$titulo[idx] <- ttldif$titulo17[idx]
ttldif$ano <- ttldif$titulo10 <- ttldif$titulo13 <- ttldif$titulo17 <- NULL
ttldif <- ttldif[!is.na(ttldif$titulo), ]
ttldif <- ttldif[!duplicated(ttldif), c("titulo", "livro.ou.periodico")]
colnames(ttldif) <- c("Título Qualis", "Título Lattes")
LimparDif <- function(x) {
x <- gsub("[\\.,!;:?]", "", x)
x <- gsub("  ", " ", x)
x
}
NDif <- function(x) {
x1 <- LimparDif(x[1])
x2 <- LimparDif(x[2])
n2 <- nchar(x1) - 12
if (n2 > 2)
for (n in 1:n2)
if (grepl(tolower(substr(x1, n, n + 12)), tolower(x2), fixed = TRUE))
return(FALSE)
return(TRUE)
}
i <- apply(ttldif, 1, NDif)
ttldif[i, 1] <- paste("\\rowcolor{ninval}", ttldif[i, 1])
} else {
ttldif <- ttldif[, c("ano", "livro.ou.periodico")]
colnames(ttldif) <- c("Título Qualis", "Título Lattes")
}
semqualis <- p[p$qualis == "SQ", c("isxn", "livro.ou.periodico")]
semqualis <- semqualis[!duplicated(semqualis), ]
semqualis <- semqualis[order(semqualis$livro.ou.periodico), ]
semqualis$livro.ou.periodico <- sub(" \x26 ", " \x5c\x5c\x26 ", semqualis$livro.ou.periodico)
colnames(semqualis) <- c("ISSN", "Título do periódico")
p$Country <- factor(p$Country)
save(datacv, quando, doutor, nSJR, nSnip, oriconcTab, oriandTab, posdoc, premios, pontuacaoLvr, pontuacaoArt, pontuacaoSNIP, file = "tabs.RData")
cnpqId <- datacv[order(datacv$Professor), ]
sink("curriculos/links_para_Lattes_XML.html")
cat('<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n')
cat('<html xmlns="http://www.w3.org/1999/xhtml">\n')
cat('<head>\n')
cat('   <meta http-equiv="content-type" content="text/html; charset=utf-8" />\n')
cat('   <title>Lista de professores</title>\n')
cat('</head>\n')
cat('<body>\n')
cat('<p><strong>Lista dos currículos incluídos no relatório gerado mais recentemente (links para Lattes no formato XML):</strong></p>\n')
cat('<ol>\n')
cat(paste0('  <li><a href="http://buscatextual.cnpq.br/buscatextual/download.do?metodo=apresentar&idcnpq=',
cnpqId$cnpqId, '">', cnpqId$Professor, '</a></li>\n', sep = "", collapse = ""))
cat('</ol>\n')
cat('</body>\n')
cat('</html>\n')
sink()
knitr::knit("QualisLattes.Rnw")
